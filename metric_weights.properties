# Relative weights of the relevant metrics from cAdvisor about the docker
# container in their summarization as a single metric for the load balancer.
#
# (Note: The rationale is that most load-balancers use a simple metric, or
#  "weight", for their decisions: they don't accept a vector of weights. So
#  we are required to summarize, or transform, our vector of weights from
#  cAdvisor into a single metric for the load balancer.)
#
# (Note: since the input vector of stats from cAdvisor needs to be summarized
#        into a single metric, the issue of the normalization of each
#        component of that input vector needs to be taken into account in these
#        relative weights below. For example, the number of RX-packets
#        dropped -an input component- needs to be summed to the CpuLoadAvg,
#        but the dimensions of both input components -RX-packets dropped and
#        CpuLoadAvg- is different, CpuLoadAvg usually is a small number, while
#        RX-packets dropped is merely a discrete integer counter, which in
#        theory could increase quicker than the CpuLoadAvg. So all input stat
#        components of the vector from cAdvisor needs to be "normalized"
#        using, as well, the relative weights below. 
#        This program does pre-normalize the MemUsage of the docker container
#        to a value between 0 and 100.0 -a percentage-, so the relative weight
#        below "rwMemUsage" needs to take into account that MemUsage would be
#        in the range 0 to 100.0 only.)
#        

rwCpuLoadAvg=0.8
rwMemUsage=0.5
rwRxDropped=0.08
rwIoTime=0.4
rwReadTime=0.2
rwWriteTime=0.3
rwWeightedIoTime=0.2
